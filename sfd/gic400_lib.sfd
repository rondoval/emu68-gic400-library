==id $Id: gic400_lib.sfd 1.0.0 $
* "gic400.library"
==base _GIC400_Base
==basetype struct Library *
==libname gic400.library
==bias 30
==public
==include <exec/types.h>
==include <exec/interrupts.h>
==include <libraries/gic400.h>
ULONG AddIntServerEx(ULONG irq, UBYTE priority, BOOL edge, struct Interrupt *interrupt) (D0,D1,D2,A1)
ULONG RemIntServerEx(ULONG irq, struct Interrupt *interrupt) (D0, A1)
ULONG GetIntStatus(ULONG irq, BOOL *pending, BOOL *active, BOOL *enabled) (D0,A1,A2,A3)
ULONG EnableInt(ULONG irq) (D0)
ULONG DisableInt(ULONG irq) (D0)
ULONG SetIntPriority(ULONG irq, UBYTE priority) (D0,D1)
LONG GetIntPriority(ULONG irq) (D0)
ULONG SetIntTriggerEdge(ULONG irq) (D0)
ULONG SetIntTriggerLevel(ULONG irq) (D0)
ULONG RouteIntToCpu(ULONG irq, UBYTE cpu) (D0,D1)
ULONG UnrouteIntFromCpu(ULONG irq, UBYTE cpu) (D0,D1)
LONG QueryIntRoute(ULONG irq) (D0)
ULONG SetIntPending(ULONG irq) (D0)
ULONG ClearIntPending(ULONG irq) (D0)
ULONG SetIntActive(ULONG irq) (D0)
ULONG ClearIntActive(ULONG irq) (D0)
ULONG SetPriorityMask(UBYTE mask) (D0)
LONG GetPriorityMask(void) ()
LONG GetRunningPriority(void) ()
LONG GetHighestPending(void) ()
LONG GetControllerInfo(struct GICInfo *info) (A1)
==end
